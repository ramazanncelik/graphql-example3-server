import { memoize2of4 } from '@graphql-tools/utils';
import { createLRUCache } from '../utils/create-lru-cache.js';
export function useParserAndValidationCache({ documentCache = createLRUCache(), errorCache = createLRUCache(), validationCache = true, }) {
    const memoizedValidateByRules = typeof validationCache === 'boolean'
        ? createLRUCache()
        : validationCache;
    return {
        onParse({ parseFn, setParseFn, }) {
            setParseFn(function memoizedParse(source) {
                const strDocument = typeof source === 'string' ? source : source.body;
                let document = documentCache.get(strDocument);
                if (!document) {
                    const parserError = errorCache.get(strDocument);
                    if (parserError) {
                        throw parserError;
                    }
                    try {
                        document = parseFn(source);
                    }
                    catch (e) {
                        errorCache.set(strDocument, e);
                        throw e;
                    }
                    documentCache.set(strDocument, document);
                }
                return document;
            });
        },
        onValidate({ validateFn, setValidationFn, }) {
            if (validationCache !== false) {
                setValidationFn(function memoizedValidateFn(schema, document, rules) {
                    const rulesKey = rules?.map((rule) => rule.name).join(',') || '';
                    let memoizedValidateFnForRules = memoizedValidateByRules.get(rulesKey);
                    if (!memoizedValidateFnForRules) {
                        memoizedValidateFnForRules = memoize2of4(validateFn);
                        memoizedValidateByRules.set(rulesKey, memoizedValidateFnForRules);
                    }
                    return memoizedValidateFnForRules(schema, document, rules);
                });
            }
        },
    };
}
